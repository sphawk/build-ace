# Makefile for build-ace (x64, linux)
#
# Usage:
#   make -f build-ace.linux clone zlib-install openssl-install ace-install

GIT = git
PERL = perl
GCC = gcc
G++ = g++

# set version
ACE_VERSION = master
OPENSSL_VERSION = OpenSSL_1_0_2f
ZLIB_VERSION = master

# set configure options
ACE_CONFIGURE_OPTION = -type gnuace -features "ssl=1,zlib=1" -genins -value_template "build64bit=true"
ACE_CONFIGURE_STATIC = -static -name_modifier *Static

# set origins
ATCD_ORIGIN = https://github.com/sphawk/ATCD.git
OPENSSL_ORIGIN = https://github.com/sphawk/openssl.git
ZLIB_ORIGIN = https://github.com/sphawk/zlib.git

# set upstreams
ATCD_UPSTREAM = https://github.com/DOCGroup/ACE_TAO.git
OPENSSL_UPSTREAM = https://github.com/openssl/openssl.git
ZLIB_UPSTREAM = https://github.com/madler/zlib.git
MPC_UPSTREAM = https://github.com/DOCGroup/MPC.git

# set source directories
SOURCE = $(CURDIR)/source
ZLIB_SRC = $(SOURCE)/zlib
OPENSSL_SRC = $(SOURCE)/openssl
ACE_SRC = $(SOURCE)/ATCD
ACE_ROOT = $(SOURCE)/ATCD/ACE

# set destination directories
LIBRARY_ROOT = $(CURDIR)/library
ZLIB_ROOT = $(LIBRARY_ROOT)/zlib
OPENSSL_ROOT = $(LIBRARY_ROOT)/openssl
ACE_INSTALL_PATH = $(LIBRARY_ROOT)/ace

# targets

.PHONY: check_prerequisite
check_prerequisite: prerequisite

prerequisite:
	$(GIT) --version
	$(PERL) --version
	$(GCC) --version
	$(G++) --version
	echo "all passsed" > prerequisite

.PHONY : clone
clone: check_prerequisite
	-@mkdir $(SOURCE)
	@cd $(SOURCE) && $(GIT) clone $(ATCD_ORIGIN)
	@cd $(SOURCE) && $(GIT) clone $(OPENSSL_ORIGIN)
	@cd $(SOURCE) && $(GIT) clone $(ZLIB_ORIGIN)
	@cd $(ACE_ROOT) && $(GIT) clone $(MPC_UPSTREAM)
	@cd $(ACE_SRC) && $(GIT) remote add upstream $(ATCD_UPSTREAM)
	@cd $(OPENSSL_SRC) && $(GIT) remote add upstream $(OPENSSL_UPSTREAM)
	@cd $(ZLIB_SRC) && $(GIT) remote add upstream $(ZLIB_UPSTREAM)

.PHONY: ace-checkout
ace-checkout:
	@cd $(ACE_ROOT) && $(GIT) checkout $(ACE_VERSION)

.PHONY: ace-set-configure
ace-set-configure: ace-checkout
	@echo "#include \"config-linux.h\"" > $(ACE_ROOT)/ace/config.h
	@echo "include $(ACE_ROOT)/include/makeinclude/platform_linux.GNU" > $(ACE_ROOT)/include/makeinclude/platform_macros.GNU
	@echo "INSTALL_PREFIX=$(ACE_INSTALL_PATH)" >> $(ACE_ROOT)/include/makeinclude/platform_macros.GNU
	@echo "ssl=1\nzlib=1" >> $(ACE_ROOT)/include/makeinclude/platform_macros.GNU

$(ACE_ROOT)/ace/GNUmakefile: ace-set-configure
	@export ACE_ROOT=$(ACE_ROOT); export SSL_ROOT=$(LIBRARY_ROOT); export ZLIB_ROOT=$(LIBRARY_ROOT); cd $(ACE_ROOT) && bin/mwc.pl $(ACE_CONFIGURE_OPTION) ace/ace.mwc

$(ACE_ROOT)/ace/GNUmakefileStatic: ace-set-configure
	@export ACE_ROOT=$(ACE_ROOT); export SSL_ROOT=$(LIBRARY_ROOT); export ZLIB_ROOT=$(LIBRARY_ROOT); cd $(ACE_ROOT) && bin/mwc.pl $(ACE_CONFIGURE_OPTION) $(ACE_CONFIGURE_STATIC) ace/ace.mwc

.PHONY: ace-build-configure
ace-build-configure: $(ACE_ROOT)/ace/GNUmakefile $(ACE_ROOT)/ace/GNUmakefileStatic

.PHONY: ace-clean-configure
ace-clean-configure:
	@cd $(ACE_ROOT)/ace && rm -rf GNUmakefile*

.PHONY: ace-build
ace-build: check_prerequisite ace-build-configure
	@export ACE_ROOT=$(ACE_ROOT); export SSL_ROOT=$(LIBRARY_ROOT); export ZLIB_ROOT=$(LIBRARY_ROOT); cd $(ACE_ROOT)/ace && $(MAKE) -f GNUmakefile && $(MAKE) -f GNUmakefileStatic

.PHONY: ace-clean
ace-clean:
	@export ACE_ROOT=$(ACE_ROOT); export SSL_ROOT=$(LIBRARY_ROOT); export ZLIB_ROOT=$(LIBRARY_ROOT); cd $(ACE_ROOT)/ace && $(MAKE) -f GNUmakefile clean && $(MAKE) -f GNUmakefileStatic clean

.PHONY: ace-install
ace-install: ace-build
	@export ACE_ROOT=$(ACE_ROOT); export SSL_ROOT=$(LIBRARY_ROOT); export ZLIB_ROOT=$(LIBRARY_ROOT); cd $(ACE_ROOT)/ace && $(MAKE) -f GNUmakefile install && $(MAKE) -f GNUmakefileStatic install

.PHONY: ace-test
ace-test: ace-install
	@cd $(ACE_ROOT) && bin/mwc.pl $(ACE_CONFIGURE_OPTION) tests/tests.mwc
	@cd $(ACE_ROOT)/tests && $(MAKE)
	@cd $(ACE_ROOT)/tests && ./run_test.pl

.PHONY: ace-example
ace-example: ace-install
	@cd $(ACE_ROOT) && bin/mwc.pl $(ACE_CONFIGURE_OPTION) examples/examples.mwc
	@cd $(ACE_ROOT)/examples && $(MAKE)

.PHONY: openssl-checkout
openssl-checkout:
	@cd $(OPENSSL_SRC) && $(GIT) checkout $(OPENSSL_VERSION)

.PHONY: openssl-build
openssl-build: check_prerequisite openssl-checkout
	@cd $(OPENSSL_SRC) && ./config --prefix=$(OPENSSL_ROOT) shared
	@cd $(OPENSSL_SRC) && $(MAKE)

.PHONY: openssl-test
openssl-test: openssl-build
	@cd $(OPENSSL_SRC) && $(MAKE) test

.PHONY: openssl-install
openssl-install: openssl-build
	@cd $(OPENSSL_SRC) && $(MAKE) install

.PHONY: zlib-checkout
zlib-checkout:
	@cd $(ZLIB_SRC) && $(GIT) checkout $(ZLIB_VERSION)

.PHONY: zlib-build
zlib-build: check_prerequisite zlib-checkout
	@cd $(ZLIB_SRC) && ./configure --prefix=$(ZLIB_ROOT) --64
	@cd $(ZLIB_SRC) && $(MAKE)

.PHONY: zlib-test
zlib-test: zlib-build
	@cd $(ZLIB_SRC) && $(MAKE) test

.PHONY: zlib-install
zlib-install: zlib-build
	@cd $(ZLIB_SRC) && $(MAKE) install

# sync local and origin from upstream
.PHONY: sync
sync: check_prerequisite
	@cd $(ACE_SRC) && $(GIT) fetch --tags upstream
	@cd $(ACE_SRC) && $(GIT) checkout master
	@cd $(ACE_SRC) && $(GIT) merge upstream/master
	@cd $(ACE_SRC) && $(GIT) push --tags --force origin master
	@cd $(ACE_SRC)/ACE/MPC && $(GIT) fetch --tags origin
	@cd $(ACE_SRC)/ACE/MPC && $(GIT) checkout master
	@cd $(ACE_SRC)/ACE/MPC && $(GIT) merge origin/master
	@cd $(OPENSSL_SRC) && $(GIT) fetch --tags upstream
	@cd $(OPENSSL_SRC) && $(GIT) checkout master
	@cd $(OPENSSL_SRC) && $(GIT) merge upstream/master
	@cd $(OPENSSL_SRC) && $(GIT) push --tags --force origin master
	@cd $(ZLIB_SRC) && $(GIT) fetch --tags upstream
	@cd $(ZLIB_SRC) && $(GIT) checkout master
	@cd $(ZLIB_SRC) && $(GIT) merge upstream/master
	@cd $(ZLIB_SRC) && $(GIT) push --tags --force origin master

# cleanup
.PHONY: libclean
libclean:
	-@rm -rf $(LIBRARY_ROOT)

.PHONY: clean
clean: libclean
	-@rm prerequisite
	-@rm -rf $(SOURCE)

