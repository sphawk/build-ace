# Makefile for build-ace (x64, windows)
#
# Usage:
#   nmake -f build-ace.msc clone zlib-install openssl-install ace-install

GIT = git
PERL = perl
MSBUILD = msbuild

# set version
ACE_VERSION = master
OPENSSL_VERSION = OpenSSL_1_0_2f
ZLIB_VERSION = master

# set configure options
ACE_CONFIGURE_OPTION = -type vc14 -features "qos=1,ssl=1,zlib=1" -genins -value_template "multiprocessorcompilation=true"
ACE_CONFIGURE_STATIC = -static -name_modifier *_Static

# set origins
ATCD_ORIGIN = https://github.com/sphawk/ATCD.git
OPENSSL_ORIGIN = https://github.com/sphawk/openssl.git
ZLIB_ORIGIN = https://github.com/sphawk/zlib.git

# set upstreams
ATCD_UPSTREAM = https://github.com/DOCGroup/ACE_TAO.git
OPENSSL_UPSTREAM = https://github.com/openssl/openssl.git
ZLIB_UPSTREAM = https://github.com/madler/zlib.git
MPC_UPSTREAM = https://github.com/DOCGroup/MPC.git

# set source directories
SOURCE = $(MAKEDIR)\source
ZLIB_SRC = $(SOURCE)\zlib
OPENSSL_SRC = $(SOURCE)\openssl
ACE_SRC = $(SOURCE)\ATCD
ACE_ROOT = $(SOURCE)\ATCD\ACE

# set destination directories
LIBRARY = $(MAKEDIR)\library
ZLIB_ROOT = $(LIBRARY)\zlib
OPENSSL_ROOT = $(LIBRARY)\openssl
ACE_INSTALL_PATH = $(LIBRARY)\ace

# targets

check_prerequisite: .prerequisite

.prerequisite:
	$(GIT) --version
	$(PERL) --version
	$(MSBUILD) /version
	echo "all passsed" > .prerequisite

clone: check_prerequisite
	-@md $(SOURCE)
	-@md $(LIBRARY)
	@cd $(SOURCE) && $(GIT) clone $(ATCD_ORIGIN)
	@cd $(SOURCE) && $(GIT) clone $(OPENSSL_ORIGIN)
	@cd $(SOURCE) && $(GIT) clone $(ZLIB_ORIGIN)
	@cd $(ACE_ROOT) && $(GIT) clone $(MPC_UPSTREAM)
	@cd $(ACE_SRC) && $(GIT) remote add upstream $(ATCD_UPSTREAM)
	@cd $(OPENSSL_SRC) && $(GIT) remote add upstream $(OPENSSL_UPSTREAM)
	@cd $(ZLIB_SRC) && $(GIT) remote add upstream $(ZLIB_UPSTREAM)

ace-checkout:
    cd $(ACE_ROOT) && $(GIT) checkout $(ACE_VERSION)

ace-build-configure: ace-checkout $(ACE_ROOT)\ace\ACE.sln $(ACE_ROOT)\ace\ACE_Static.sln

ace-clean-configure:
	@del /s /q $(ACE_ROOT)\ace\*.sln
	@del /s /q $(ACE_ROOT)\ace\*.vcxproj

$(ACE_ROOT)\ace\ACE.sln:
    @set ACE_ROOT=$(ACE_ROOT)
    @set SSL_ROOT=$(OPENSSL_ROOT)
    @set ZLIB_ROOT=$(ZLIB_ROOT)
    @cd $(ACE_ROOT) && echo #include "config-win32.h" > ace\config.h
	@cd $(ACE_ROOT) && bin\mwc.pl $(ACE_CONFIGURE_OPTION) ace\ACE.mwc

$(ACE_ROOT)\ace\ACE_Static.sln:
    @set ACE_ROOT=$(ACE_ROOT)
    @set SSL_ROOT=$(OPENSSL_ROOT)
    @set ZLIB_ROOT=$(ZLIB_ROOT)
    @cd $(ACE_ROOT) && echo #include "config-win32.h" > ace\config.h
    @cd $(ACE_ROOT) && bin\mwc.pl $(ACE_CONFIGURE_OPTION) $(ACE_CONFIGURE_STATIC) ace\ACE.mwc

ace-build: check_prerequisite ace-build-configure
	@set ACE_ROOT=$(ACE_ROOT)
	@set SSL_ROOT=$(OPENSSL_ROOT)
	@set ZLIB_ROOT=$(ZLIB_ROOT)
	@cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Debug /p:Platform=x64 /t:Build /maxcpucount ace\ACE.sln
	@cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Release /p:Platform=x64 /t:Build /maxcpucount ace\ACE.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Debug /p:Platform=x64 /t:Build /maxcpucount ace\ACE_Static.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Release /p:Platform=x64 /t:Build /maxcpucount ace\ACE_Static.sln

$(ACE_ROOT)\tests\tests.sln:
    @cd $(ACE_ROOT) && bin\mwc.pl $(ACE_CONFIGURE_OPTION) tests\tests.mwc

$(ACE_ROOT)\tests\tests_Static.sln:
    @cd $(ACE_ROOT) && bin\mwc.pl $(ACE_CONFIGURE_OPTION) $(ACE_CONFIGURE_STATIC) tests\tests.mwc

ace-test-config-clean:
    @cd $(ACE_ROOT) && del examples\examples.sln
    @cd $(ACE_ROOT) && del examples\examples_Static.sln

ace-test: ace-build $(ACE_ROOT)\tests\tests.sln $(ACE_ROOT)\tests\tests_Static.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Debug /p:Platform=x64 /t:Build /maxcpucount tests\tests.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Release /p:Platform=x64 /t:Build /maxcpucount tests\tests.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Debug /p:Platform=x64 /t:Build /maxcpucount tests\tests_Static.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Release /p:Platform=x64 /t:Build /maxcpucount tests\tests_Static.sln
    @set PATH=%PATH%;$(ACE_ROOT)\lib
    @cd $(ACE_ROOT)\tests && run_test.pl

$(ACE_ROOT)\examples\examples.sln:
    @cd $(ACE_ROOT) && bin\mwc.pl $(ACE_CONFIGURE_OPTION) examples\examples.mwc

$(ACE_ROOT)\examples\examples_Static.sln:
    @cd $(ACE_ROOT) && bin\mwc.pl $(ACE_CONFIGURE_OPTION) $(ACE_CONFIGURE_STATIC) examples\examples.mwc

ace-example-config-clean:
    @cd $(ACE_ROOT) && del examples\examples.sln
    @cd $(ACE_ROOT) && del examples\examples_Static.sln

ace-example: ace-build $(ACE_ROOT)\examples\examples.sln $(ACE_ROOT)\examples\examples_Static.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Debug /p:Platform=x64 /t:Build /maxcpucount examples\examples.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Release /p:Platform=x64 /t:Build /maxcpucount examples\examples.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Debug /p:Platform=x64 /t:Build /maxcpucount examples\examples_Static.sln
    @cd $(ACE_ROOT) && $(MSBUILD) /p:Configuration=Release /p:Platform=x64 /t:Build /maxcpucount examples\examples_Static.sln

ace-install: ace-build
	-@md $(ACE_INSTALL_PATH)\lib
	-@md $(ACE_INSTALL_PATH)\bin
	@cd $(ACE_ROOT) && mpc\prj_install.pl $(ACE_INSTALL_PATH)\include ace
	@cd $(ACE_ROOT) && copy /y /b .\lib\*.lib $(ACE_INSTALL_PATH)\lib
	@cd $(ACE_ROOT) && copy /y /b .\lib\*.dll $(ACE_INSTALL_PATH)\bin
	@cd $(ACE_ROOT) && copy /y /b .\lib\*.pdb $(ACE_INSTALL_PATH)\bin

openssl-checkout:
    @cd $(OPENSSL_SRC) && $(GIT) checkout $(OPENSSL_VERSION)

openssl-build: check_prerequisite openssl-checkout
	@cd $(OPENSSL_SRC) && $(PERL) Configure VC-WIN64A --prefix="$(OPENSSL_ROOT)" enable-static-engine
	@cd $(OPENSSL_SRC) && call ms\do_win64a
    @cd $(OPENSSL_SRC) && $(MAKE) -f ms\nt.mak
    @cd $(OPENSSL_SRC) && $(MAKE) -f ms\ntdll.mak

openssl-test: openssl-build
    @cd $(OPENSSL_SRC) && $(MAKE) -f ms\nt.mak test
	@cd $(OPENSSL_SRC) && $(MAKE) -f ms\ntdll.mak test

openssl-install: openssl-build
    -@md $(OPENSSL_ROOT)\bin
    -@md $(OPENSSL_ROOT)\lib
    -@md $(OPENSSL_ROOT)\include\openssl
    @cd $(OPENSSL_SRC) && $(MAKE) -f ms\ntdll.mak install
    @copy /y /b $(OPENSSL_SRC)\out32dll\ssleay32.pdb $(OPENSSL_ROOT)\bin
    @copy /y /b $(OPENSSL_SRC)\out32dll\libeay32.pdb $(OPENSSL_ROOT)\bin
    @copy /y /b $(OPENSSL_SRC)\out32dll\openssl.pdb $(OPENSSL_ROOT)\bin
    @copy /y /b $(OPENSSL_SRC)\out32dll\ssleay32.exp $(OPENSSL_ROOT)\lib
    @copy /y /b $(OPENSSL_SRC)\out32dll\libeay32.exp $(OPENSSL_ROOT)\lib
    @copy /y /b $(OPENSSL_SRC)\out32\ssleay32.lib $(OPENSSL_ROOT)\lib\ssleay32s.lib
    @copy /y /b $(OPENSSL_SRC)\out32\libeay32.lib $(OPENSSL_ROOT)\lib\libeay32s.lib

zlib-build: check_prerequisite zlib-checkout
	@cd $(ZLIB_SRC) && $(MAKE) -f win32/Makefile.msc AS=ml64 LOC="-DASMV -DASMINF -I." OBJA="inffasx64.obj gvmat64.obj inffas8664.obj"

zlib-checkout:
	@cd $(ZLIB_SRC) && $(GIT) checkout $(ZLIB_VERSION)

zlib-test: zlib-build
	@cd $(ZLIB_SRC) && $(MAKE) -f win32/Makefile.msc test
	@cd $(ZLIB_SRC) && $(MAKE) -f win32/Makefile.msc testdll

zlib-install: zlib-build
	-@rd /s /q $(ZLIB_ROOT)\include
	-@rd /s /q $(ZLIB_ROOT)\lib
	-@rd /s /q $(ZLIB_ROOT)\bin
	-@md $(ZLIB_ROOT)\include\zlib
	-@md $(ZLIB_ROOT)\lib
	-@md $(ZLIB_ROOT)\bin
	@copy /y /b $(ZLIB_SRC)\zconf.h $(ZLIB_ROOT)\include\zlib
	@copy /y /b $(ZLIB_SRC)\zlib.h  $(ZLIB_ROOT)\include\zlib
	@copy /y /b $(ZLIB_SRC)\zlib.lib  $(ZLIB_ROOT)\lib
	@copy /y /b $(ZLIB_SRC)\zlib.map  $(ZLIB_ROOT)\lib
	@copy /y /b $(ZLIB_SRC)\zlib.pdb  $(ZLIB_ROOT)\lib
	@copy /y /b $(ZLIB_SRC)\zdll.exp  $(ZLIB_ROOT)\lib
	@copy /y /b $(ZLIB_SRC)\zdll.lib  $(ZLIB_ROOT)\lib
	@copy /y /b $(ZLIB_SRC)\zlib1.dll $(ZLIB_ROOT)\bin
	@copy /y /b $(ZLIB_SRC)\zlib1.pdb $(ZLIB_ROOT)\bin

# sync local and origin from upstream
sync: check_prerequisite
	@cd $(ACE_SRC) && $(GIT) fetch --tags upstream
	@cd $(ACE_SRC) && $(GIT) checkout master
	@cd $(ACE_SRC) && $(GIT) merge upstream/master
	@cd $(ACE_SRC) && $(GIT) push --tags --force origin master
	@cd $(ACE_SRC)/ACE/MPC && $(GIT) fetch --tags origin
	@cd $(ACE_SRC)/ACE/MPC && $(GIT) checkout master
	@cd $(ACE_SRC)/ACE/MPC && $(GIT) merge origin/master
	@cd $(OPENSSL_SRC) && $(GIT) fetch --tags upstream
	@cd $(OPENSSL_SRC) && $(GIT) checkout master
	@cd $(OPENSSL_SRC) && $(GIT) merge upstream/master
	@cd $(OPENSSL_SRC) && $(GIT) push --tags --force origin master
	@cd $(ZLIB_SRC) && $(GIT) fetch --tags upstream
	@cd $(ZLIB_SRC) && $(GIT) checkout master
	@cd $(ZLIB_SRC) && $(GIT) merge upstream/master
	@cd $(ZLIB_SRC) && $(GIT) push --tags --force origin master

# cleanup
libclean:
	-@rd /s /q $(LIBRARY)

clean:
	-@del .prerequisite
	-@rd /s /q $(LIBRARY)
	-@rd /s /q $(SOURCE)
